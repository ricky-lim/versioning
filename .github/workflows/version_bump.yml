name: Version Bump

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  bump-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.VERSIONING_WORKFLOW_TOKEN }}
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install bump-my-version
        run: pip install bump-my-version

      - name: Configure Git
        run: |
          git config user.name "ricky-lim"
          git config user.email "rlim.email@gmail.com"

      - name: Determine version bump type
        id: bump-type
        run: |
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          if [[ $PR_BRANCH == bugfix/* ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          elif [[ $PR_BRANCH == feature/* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif [[ $PR_BRANCH == release/* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          fi

      - name: Bump version and update CHANGELOG.md
        if: steps.bump-type.outputs.bump != ''
        run: |
          # Store initial commit for potential revert
          echo "initial_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

          # Bump the version
          bump-my-version bump ${{ steps.bump-type.outputs.bump }}

          NEW_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          DATE=$(date +%Y-%m-%d)
          # Replace NEXT with version and date
          sed -i.bak "s/## NEXT/## [$NEW_VERSION] - $DATE/" CHANGELOG.md
          rm CHANGELOG.md.bak
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for version $NEW_VERSION"

      - name: Push and verify tags
        if: steps.bump-type.outputs.bump != ''
        id: push-verify
        continue-on-error: true
        run: |
          OLD_TAGS=$(git tag -l | wc -l)
          echo "Old tags: $OLD_TAGS"
          git push origin main
          git push --tags
          NEW_TAGS=$(git tag -l | wc -l)
          echo "New tags: $NEW_TAGS"
          if [ "$NEW_TAGS" -le "$OLD_TAGS" ]; then
            echo "No new tags were created"
            exit 1
          fi
          echo "Test"
          exit 1

      - name: Revert changes on failure
        if: failure() && steps.push-verify.outcome == 'failure'
        run: |
          git reset --hard ${{ steps.version-bump.outputs.initial_commit }}
          git push -f origin main
          git tag -l | xargs git push --delete origin
          git tag -l | xargs git tag -d
